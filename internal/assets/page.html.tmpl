<!DOCTYPE html>
{{ template "head.html.tmpl" . }}
<body>
  {{ template "nav.html.tmpl" . }}
  <main>
    <div>
        {{ if .Page.Exists }}
          {{ if .Page.IsGenerated }}
          <h1 class="bull_title">{{ .Page.PageName }}</h1>
          {{ else }}
          <h1 class="bull_title">
          {{ $components := .Page.NameComponents }}
          {{ $last := lastidx $components }}
          {{ range $idx, $dir := $components }}
          {{ if (eq $idx $last) }}
          {{ $dir }}
          {{ else }}
          {{ $path := (componentsUntil $components $idx) }}
          <a href="{{ $.URLBullPrefix }}browse?dir={{ $path }}">{{ $dir }}</a> /
          {{ end }}
          {{ end }}
        </h1>
        {{ end }}
        {{ template "lastupdate.html.tmpl" . }}
        {{ end }}

	<div class="bull_page {{ .Page.Class }}">
	  {{ .Content }}
	</div>

      </div>

    </div>
  </main>

{{ if (or (eq .Watch "true") (eq .Watch "workaround")) }}
  <script type="text/javascript">
    var u = new URL(document.URL);
    u.pathname = '{{ .URLBullPrefix }}watch/' + u.pathname.substr('{{ .URLPrefix }}'.length);
    var params = new URLSearchParams();
    params.set('hash', '{{ .ContentHash }}');
    u.search = params.toString();
    {{ if (eq .Watch "workaround") }}
    // systemd-resolved synthesizes DNS resource records for any hostname ending
    // in .localhost, which allows us to circumvent the 6 connections per origin
    // limit that browsers like Chrome and Firefox enforce.
    if (u.hostname == 'localhost') {
	u.hostname = 'watch' + Math.floor(Math.random() * 100) + '.localhost'
    }
    {{ end }}
    var updates = new EventSource(u.toString());
    window.onbeforeunload = function() { updates.close(); };
    updates.onmessage = function(e) {
	//const update = JSON.parse(e.data)
	console.log('page changed:', e.data);
	location.reload();
    }
  </script>
{{ end }}

  <script src="{{ .URLBullPrefix }}js/nav.js?cachebust={{ call .StaticHash "js/nav.js" }}" async></script>

</body>
</html>
